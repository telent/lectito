class UserDecorator < ApplicationDecorator
  decorates :user

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #   
  #   Or, optionally enable "lazy helpers" by calling this method:
  #     lazy_helpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #   
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"), 
  #                   :class => 'timestamp'
  #   end

  # *You* did X to Foo
  def name_or_subject_pronoun(capitalize=nil)
    if user==h.current_user then
      capitalize ? "You" : "you"
    else
      user.name
    end
  end
  # Foo did X to *you*
  # these are the same in English, but other languages differ
  def name_or_object_pronoun(capitalize=nil)
    name_or_subject_pronoun capitalize
  end
end
